.TH "magrathea::Constants< Type >" 3 "Wed Oct 6 2021" "MAGRATHEA/PATHFINDER" \" -*- nroff -*-
.ad l
.nh
.SH NAME
magrathea::Constants< Type > \- 
.PP
Common mathematical and physical constants\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <constants\&.h>\fP
.SS "Static Public Member Functions"

.PP
.RI "\fBMathematical constants\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBpi\fP ()"
.br
.RI "\fIPi\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBnapier\fP ()"
.br
.RI "\fINapier constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBeuler\fP ()"
.br
.RI "\fIEuler-Mascheroni constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBgolden\fP ()"
.br
.RI "\fIGolden ratio\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBpythagoras\fP ()"
.br
.RI "\fIPythagoras constant, square root of 2\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBtheodorus\fP ()"
.br
.RI "\fITheodorus constant, square root of 3\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBglaisher\fP ()"
.br
.RI "\fIGlaisher-Kinkelin constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBkhinchin\fP ()"
.br
.RI "\fIKhinchin constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBsoldner\fP ()"
.br
.RI "\fIRamanujan-Soldner constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmertens\fP ()"
.br
.RI "\fIMeissel-Mertens constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBplastic\fP ()"
.br
.RI "\fIPlastic number\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBcatalan\fP ()"
.br
.RI "\fICatalan constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBfeigenbaumd\fP ()"
.br
.RI "\fIFirst Feigenbaum constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBfeigenbauma\fP ()"
.br
.RI "\fISecond Feigenbaum constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBomega\fP ()"
.br
.RI "\fIOmega constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBtanarcsec\fP ()"
.br
.RI "\fIValue of the tangent of one arcsecond\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBsqrtpi\fP ()"
.br
.RI "\fISquare root of pi\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBpi2\fP ()"
.br
.RI "\fISquared pi\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBUniversal constants\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBc\fP ()"
.br
.RI "\fISpeed of light in vacuum\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBg\fP ()"
.br
.RI "\fINewtonian constant of gravitation\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBh\fP ()"
.br
.RI "\fIPlanck constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBhbar\fP ()"
.br
.RI "\fIReduced Planck constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBc2\fP ()"
.br
.RI "\fISquared speed of light in vacuum\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBg2\fP ()"
.br
.RI "\fISquared newtonian constant of gravitation\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBh2\fP ()"
.br
.RI "\fISquared Planck constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBhbar2\fP ()"
.br
.RI "\fISquared reduced Planck constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBc4\fP ()"
.br
.RI "\fISpeed of light in vacuum to the fourth\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBUnits\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBcelsius\fP ()"
.br
.RI "\fIValue of zero celsius degree in kelvin\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBatomic\fP ()"
.br
.RI "\fIValue of the atomic mass in kilograms\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBatm\fP ()"
.br
.RI "\fIValue of one atmosphere in pascals\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBgn\fP ()"
.br
.RI "\fIAcceleration of gravity in meters per second squared\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBau\fP ()"
.br
.RI "\fIValue of an astronomical unit in meters\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBev\fP ()"
.br
.RI "\fIValue of an electron-volt in joules\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBevc2\fP ()"
.br
.RI "\fIValue of the electron-volt mass unit in kilograms\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBdeg\fP ()"
.br
.RI "\fIValue of a degree in radians\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBarcmin\fP ()"
.br
.RI "\fIValue of an arcminute in radians\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBarcsec\fP ()"
.br
.RI "\fIValue of an arcsecond in radians\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBdeg2\fP ()"
.br
.RI "\fIValue of a square degree in steradians\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBarcmin2\fP ()"
.br
.RI "\fIValue of a square arcminute in steradians\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBarcsec2\fP ()"
.br
.RI "\fIValue of a square arcsecond in steradians\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBsphere\fP ()"
.br
.RI "\fIValue of a sphere in steradians\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBsecond\fP ()"
.br
.RI "\fIDuration of a second in seconds\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBminute\fP ()"
.br
.RI "\fIDuration of a minute in seconds\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBhour\fP ()"
.br
.RI "\fIDuration of an hour in seconds\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBday\fP ()"
.br
.RI "\fIDuration of a SI julian day in seconds\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fByear\fP ()"
.br
.RI "\fIDuration of a SI julian year in seconds\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBly\fP ()"
.br
.RI "\fIValue of a light-year in meters\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBpc\fP ()"
.br
.RI "\fIValue of a parsec in meters\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBParticle masses\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmquarku\fP ()"
.br
.RI "\fIUp quark mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmquarkd\fP ()"
.br
.RI "\fIDown quark mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmquarkc\fP ()"
.br
.RI "\fICharm quark mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmquarks\fP ()"
.br
.RI "\fIStrange quark mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmquarkt\fP ()"
.br
.RI "\fITop quark mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmquarkb\fP ()"
.br
.RI "\fIBottom quark mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmelectron\fP ()"
.br
.RI "\fIElectron mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmmuon\fP ()"
.br
.RI "\fIMuon mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmtau\fP ()"
.br
.RI "\fITau mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmnuelectron\fP ()"
.br
.RI "\fIElectron neutrino mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmnumuon\fP ()"
.br
.RI "\fIMuon neutrino mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmnutau\fP ()"
.br
.RI "\fITau neutrino mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmphoton\fP ()"
.br
.RI "\fI\fBPhoton\fP mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmbosonw\fP ()"
.br
.RI "\fIW boson mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmbosonz\fP ()"
.br
.RI "\fIZ boson mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmgluon\fP ()"
.br
.RI "\fIGluon mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmhiggs\fP ()"
.br
.RI "\fIHiggs boson mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmgraviton\fP ()"
.br
.RI "\fIGraviton mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmproton\fP ()"
.br
.RI "\fIProton mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmneutron\fP ()"
.br
.RI "\fINeutron mass\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBElectromagnetic constants\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBfcd\fP ()"
.br
.RI "\fIFrequency of radiation used in candela definition\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBkcd\fP ()"
.br
.RI "\fILuminous efficacy used in candela definition\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBe\fP ()"
.br
.RI "\fIElementary charge\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBe2\fP ()"
.br
.RI "\fISquared elementary charge\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmu0\fP ()"
.br
.RI "\fIVacuum permeability\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBepsilon0\fP ()"
.br
.RI "\fIVacuum permittivity\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBz0\fP ()"
.br
.RI "\fICharacteristic impedance of vacuum\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBke\fP ()"
.br
.RI "\fICoulomb's constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmagnetonb\fP ()"
.br
.RI "\fIBohr magneton\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmagnetonn\fP ()"
.br
.RI "\fINuclear magneton\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBquantumc\fP ()"
.br
.RI "\fIQuantum conductance\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBquantumf\fP ()"
.br
.RI "\fIQuantum flux\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBjosephson\fP ()"
.br
.RI "\fIJosephson constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBklitzing\fP ()"
.br
.RI "\fIVon Klitzing constant\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBPhysico-chemical constants\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBna\fP ()"
.br
.RI "\fIAvogadro number\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBwien\fP ()"
.br
.RI "\fIWien constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBkb\fP ()"
.br
.RI "\fIBoltzmann constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBkb2\fP ()"
.br
.RI "\fISquared boltzmann constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBgas\fP ()"
.br
.RI "\fIIdeal gas constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBradiationf\fP ()"
.br
.RI "\fIFirst radiation constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBradiations\fP ()"
.br
.RI "\fISecond radiation constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBfaraday\fP ()"
.br
.RI "\fIFaraday constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBstefan\fP ()"
.br
.RI "\fIStefan constant\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBAtomic and nuclear constants\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBhfs\fP ()"
.br
.RI "\fIGround state hyperfine splitting frequency of caesium 133\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBalpha\fP ()"
.br
.RI "\fIFine structure constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBalpha2\fP ()"
.br
.RI "\fISquared fine structure constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrydberg\fP ()"
.br
.RI "\fIRydberg constant\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrelectron\fP ()"
.br
.RI "\fIClassical electron radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrbohr\fP ()"
.br
.RI "\fIBohr radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBhartree\fP ()"
.br
.RI "\fIHartree energy\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBthomson\fP ()"
.br
.RI "\fIThomson cross section\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBPlanck units\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBplanckq\fP ()"
.br
.RI "\fIPlanck charge\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBplanckl\fP ()"
.br
.RI "\fIPlanck length\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBplanckm\fP ()"
.br
.RI "\fIPlanck mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBplanckt\fP ()"
.br
.RI "\fIPlanck time\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBplanckf\fP ()"
.br
.RI "\fIPlanck force\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBplancke\fP ()"
.br
.RI "\fIPlanck energy\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBplanckp\fP ()"
.br
.RI "\fIPlanck power\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBplancktheta\fP ()"
.br
.RI "\fIPlanck temperature\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBSolar system masses\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmsun\fP ()"
.br
.RI "\fISolar mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmearth\fP ()"
.br
.RI "\fIEarth mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmmercury\fP ()"
.br
.RI "\fIMercury mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmvenus\fP ()"
.br
.RI "\fIVenus mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmmars\fP ()"
.br
.RI "\fIMars mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmjupiter\fP ()"
.br
.RI "\fIJupiter mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmsaturn\fP ()"
.br
.RI "\fISaturn mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmuranus\fP ()"
.br
.RI "\fIUranus mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmneptune\fP ()"
.br
.RI "\fINeptune mass\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBmmoon\fP ()"
.br
.RI "\fIMoon mass\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBSolar system radii\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrsun\fP ()"
.br
.RI "\fISolar radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrearth\fP ()"
.br
.RI "\fIVenus radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrmercury\fP ()"
.br
.RI "\fIEarth radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrvenus\fP ()"
.br
.RI "\fIMercury radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrmars\fP ()"
.br
.RI "\fIMars radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrjupiter\fP ()"
.br
.RI "\fIJupiter radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrsaturn\fP ()"
.br
.RI "\fISaturn radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBruranus\fP ()"
.br
.RI "\fIUranus radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrneptune\fP ()"
.br
.RI "\fINeptune radius\&. \fP"
.ti -1c
.RI "static constexpr const 
.br
\fBConstant\fP< Type > \fBrmoon\fP ()"
.br
.RI "\fIMoon radius\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBTest\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static int \fBexample\fP ()"
.br
.RI "\fIExample function\&. \fP"
.in -1c
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Type = double>exception magrathea::Constants< Type >"
Common mathematical and physical constants\&. 

Provides an unified access to common mathematical and physical constants in SI units\&. When the square of the constant is widely used in common formulas, it is provided too\&. The values were taken in 2012 from : 
.PD 0

.IP "\(bu" 2
Wikipedia : http://en.wikipedia.org/wiki/Mathematical_constant http://en.wikipedia.org/wiki/Physical_constants 
.IP "\(bu" 2
CODATA : http://www.codata.org 
.IP "\(bu" 2
Particle Data Group : http://pdg.lbl.gov 
.IP "\(bu" 2
International Astronomical Union : http://www.iau.org 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIType\fP Type of the constants\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::alpha ()\fC [static]\fP"

.PP
Fine structure constant\&. Gets the value of $\alpha$\&. 
.PP
\fBReturns:\fP
.RS 4
$\alpha$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::alpha2 ()\fC [static]\fP"

.PP
Squared fine structure constant\&. Gets the value of $\alpha^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\alpha^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::arcmin ()\fC [static]\fP"

.PP
Value of an arcminute in radians\&. Gets the value of $arcmin$\&. 
.PP
\fBReturns:\fP
.RS 4
$arcmin$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::arcmin2 ()\fC [static]\fP"

.PP
Value of a square arcminute in steradians\&. Gets the value of $arcmin^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$arcmin^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::arcsec ()\fC [static]\fP"

.PP
Value of an arcsecond in radians\&. Gets the value of $arcsec$\&. 
.PP
\fBReturns:\fP
.RS 4
$arcsec$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::arcsec2 ()\fC [static]\fP"

.PP
Value of a square arcsecond in steradians\&. Gets the value of $arcsec^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$arcsec^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::atm ()\fC [static]\fP"

.PP
Value of one atmosphere in pascals\&. Gets the value of $atm$\&. 
.PP
\fBReturns:\fP
.RS 4
$atm$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::atomic ()\fC [static]\fP"

.PP
Value of the atomic mass in kilograms\&. Gets the value of $u$\&. 
.PP
\fBReturns:\fP
.RS 4
$u$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::au ()\fC [static]\fP"

.PP
Value of an astronomical unit in meters\&. Gets the value of $au$\&. 
.PP
\fBReturns:\fP
.RS 4
$au$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::c ()\fC [static]\fP"

.PP
Speed of light in vacuum\&. Gets the value of $c$\&. 
.PP
\fBReturns:\fP
.RS 4
$c$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::c2 ()\fC [static]\fP"

.PP
Squared speed of light in vacuum\&. Gets the value of $c^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$c^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::c4 ()\fC [static]\fP"

.PP
Speed of light in vacuum to the fourth\&. Gets the value of $c^{4}$\&. 
.PP
\fBReturns:\fP
.RS 4
$c^{4}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::catalan ()\fC [static]\fP"

.PP
Catalan constant\&. Gets the value of $K$\&. 
.PP
\fBReturns:\fP
.RS 4
$K$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::celsius ()\fC [static]\fP"

.PP
Value of zero celsius degree in kelvin\&. Gets the value of $^{\circ}C$\&. 
.PP
\fBReturns:\fP
.RS 4
$^{\circ}C$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::day ()\fC [static]\fP"

.PP
Duration of a SI julian day in seconds\&. Gets the value of $d$\&. 
.PP
\fBReturns:\fP
.RS 4
$d$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::deg ()\fC [static]\fP"

.PP
Value of a degree in radians\&. Gets the value of $deg$\&. 
.PP
\fBReturns:\fP
.RS 4
$deg$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::deg2 ()\fC [static]\fP"

.PP
Value of a square degree in steradians\&. Gets the value of $deg^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$deg^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::e ()\fC [static]\fP"

.PP
Elementary charge\&. Gets the value of $e$\&. 
.PP
\fBReturns:\fP
.RS 4
$e$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::e2 ()\fC [static]\fP"

.PP
Squared elementary charge\&. Gets the value of $e^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$e^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::epsilon0 ()\fC [static]\fP"

.PP
Vacuum permittivity\&. Gets the value of $\epsilon_{0}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\epsilon_{0}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::euler ()\fC [static]\fP"

.PP
Euler-Mascheroni constant\&. Gets the value of $\gamma$\&. 
.PP
\fBReturns:\fP
.RS 4
$\gamma$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::ev ()\fC [static]\fP"

.PP
Value of an electron-volt in joules\&. Gets the value of $eV$\&. 
.PP
\fBReturns:\fP
.RS 4
$eV$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::evc2 ()\fC [static]\fP"

.PP
Value of the electron-volt mass unit in kilograms\&. Gets the value of $\frac{eV}{c^{2}}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\frac{eV}{c^{2}}$\&. 
.RE
.PP

.SS "template<typename Type > int \fBmagrathea::Constants\fP< Type >::example ()\fC [static]\fP"

.PP
Example function\&. Tests and demonstrates the use of \fBConstants\fP\&. 
.PP
\fBReturns:\fP
.RS 4
0 if no error\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::faraday ()\fC [static]\fP"

.PP
Faraday constant\&. Gets the value of $F$\&. 
.PP
\fBReturns:\fP
.RS 4
$F$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::fcd ()\fC [static]\fP"

.PP
Frequency of radiation used in candela definition\&. Gets the value of $\nu_{cd}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\nu_{cd}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::feigenbauma ()\fC [static]\fP"

.PP
Second Feigenbaum constant\&. Gets the value of $\alpha$\&. 
.PP
\fBReturns:\fP
.RS 4
$\alpha$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::feigenbaumd ()\fC [static]\fP"

.PP
First Feigenbaum constant\&. Gets the value of $\delta$\&. 
.PP
\fBReturns:\fP
.RS 4
$\delta$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::g ()\fC [static]\fP"

.PP
Newtonian constant of gravitation\&. Gets the value of $G$\&. 
.PP
\fBReturns:\fP
.RS 4
$G$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::g2 ()\fC [static]\fP"

.PP
Squared newtonian constant of gravitation\&. Gets the value of $g^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$g^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::gas ()\fC [static]\fP"

.PP
Ideal gas constant\&. Gets the value of $R$\&. 
.PP
\fBReturns:\fP
.RS 4
$R$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::glaisher ()\fC [static]\fP"

.PP
Glaisher-Kinkelin constant\&. Gets the value of $A$\&. 
.PP
\fBReturns:\fP
.RS 4
$A$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::gn ()\fC [static]\fP"

.PP
Acceleration of gravity in meters per second squared\&. Gets the value of $g_{n}$\&. 
.PP
\fBReturns:\fP
.RS 4
$g_{n}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::golden ()\fC [static]\fP"

.PP
Golden ratio\&. Gets the value of $\varphi = \frac{1+\sqrt{5}}{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\varphi = \frac{1+\sqrt{5}}{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::h ()\fC [static]\fP"

.PP
Planck constant\&. Gets the value of $h$\&. 
.PP
\fBReturns:\fP
.RS 4
$h$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::h2 ()\fC [static]\fP"

.PP
Squared Planck constant\&. Gets the value of $h^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$h^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::hartree ()\fC [static]\fP"

.PP
Hartree energy\&. Gets the value of $E_{h}$\&. 
.PP
\fBReturns:\fP
.RS 4
$E_{h}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::hbar ()\fC [static]\fP"

.PP
Reduced Planck constant\&. Gets the value of $\bar{h}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\bar{h}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::hbar2 ()\fC [static]\fP"

.PP
Squared reduced Planck constant\&. Gets the value of $\bar{h}^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\bar{h}^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::hfs ()\fC [static]\fP"

.PP
Ground state hyperfine splitting frequency of caesium 133\&. Gets the value of $\Delta\nu(^{133}Cs)_{hfs}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\Delta\nu(^{133}Cs)_{hfs}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::hour ()\fC [static]\fP"

.PP
Duration of an hour in seconds\&. Gets the value of $h$\&. 
.PP
\fBReturns:\fP
.RS 4
$h$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::josephson ()\fC [static]\fP"

.PP
Josephson constant\&. Gets the value of $K_{J}$\&. 
.PP
\fBReturns:\fP
.RS 4
$K_{J}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::kb ()\fC [static]\fP"

.PP
Boltzmann constant\&. Gets the value of $k_{B}$\&. 
.PP
\fBReturns:\fP
.RS 4
$k_{B}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::kb2 ()\fC [static]\fP"

.PP
Squared boltzmann constant\&. Gets the value of $k_{B}^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$k_{B}^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::kcd ()\fC [static]\fP"

.PP
Luminous efficacy used in candela definition\&. Gets the value of $K_{cd}$\&. 
.PP
\fBReturns:\fP
.RS 4
$K_{cd}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::ke ()\fC [static]\fP"

.PP
Coulomb's constant\&. Gets the value of $k_{e}$\&. 
.PP
\fBReturns:\fP
.RS 4
$k_{e}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::khinchin ()\fC [static]\fP"

.PP
Khinchin constant\&. Gets the value of $K_{0}$\&. 
.PP
\fBReturns:\fP
.RS 4
$K_{0}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::klitzing ()\fC [static]\fP"

.PP
Von Klitzing constant\&. Gets the value of $R_{K}$\&. 
.PP
\fBReturns:\fP
.RS 4
$R_{K}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::ly ()\fC [static]\fP"

.PP
Value of a light-year in meters\&. Gets the value of $ly$\&. 
.PP
\fBReturns:\fP
.RS 4
$ly$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::magnetonb ()\fC [static]\fP"

.PP
Bohr magneton\&. Gets the value of $\mu_{B}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\mu_{B}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::magnetonn ()\fC [static]\fP"

.PP
Nuclear magneton\&. Gets the value of $\mu_{N}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\mu_{N}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mbosonw ()\fC [static]\fP"

.PP
W boson mass\&. Gets the value of $m_{W}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{W}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mbosonz ()\fC [static]\fP"

.PP
Z boson mass\&. Gets the value of $m_{Z}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{Z}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mearth ()\fC [static]\fP"

.PP
Earth mass\&. Gets the value of $m_{E}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{E}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::melectron ()\fC [static]\fP"

.PP
Electron mass\&. Gets the value of $m_{e}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{e}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mertens ()\fC [static]\fP"

.PP
Meissel-Mertens constant\&. Gets the value of $M_{1}$\&. 
.PP
\fBReturns:\fP
.RS 4
$M_{1}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mgluon ()\fC [static]\fP"

.PP
Gluon mass\&. Gets the value of $m_{g}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{g}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mgraviton ()\fC [static]\fP"

.PP
Graviton mass\&. Gets the value of $m_{graviton}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{graviton}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mhiggs ()\fC [static]\fP"

.PP
Higgs boson mass\&. Gets the value of $m_{H}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{H}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::minute ()\fC [static]\fP"

.PP
Duration of a minute in seconds\&. Gets the value of $min$\&. 
.PP
\fBReturns:\fP
.RS 4
$min$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mjupiter ()\fC [static]\fP"

.PP
Jupiter mass\&. Gets the value of $m_{J}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{J}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mmars ()\fC [static]\fP"

.PP
Mars mass\&. Gets the value of $m_{Ma}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{Ma}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mmercury ()\fC [static]\fP"

.PP
Mercury mass\&. Gets the value of $m_{Me}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{Me}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mmoon ()\fC [static]\fP"

.PP
Moon mass\&. Gets the value of $m_{Moon}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{Moon}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mmuon ()\fC [static]\fP"

.PP
Muon mass\&. Gets the value of $m_{\mu}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{\mu}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mneptune ()\fC [static]\fP"

.PP
Neptune mass\&. Gets the value of $m_{N}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{N}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mneutron ()\fC [static]\fP"

.PP
Neutron mass\&. Gets the value of $m_{n}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{n}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mnuelectron ()\fC [static]\fP"

.PP
Electron neutrino mass\&. Gets the value of $m_{\nu_{e}}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{\nu_{e}}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mnumuon ()\fC [static]\fP"

.PP
Muon neutrino mass\&. Gets the value of $m_{\nu_{\mu}}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{\nu_{\mu}}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mnutau ()\fC [static]\fP"

.PP
Tau neutrino mass\&. Gets the value of $m_{\nu_{\tau}}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{\nu_{\tau}}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mphoton ()\fC [static]\fP"

.PP
\fBPhoton\fP mass\&. Gets the value of $m_{\gamma}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{\gamma}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mproton ()\fC [static]\fP"

.PP
Proton mass\&. Gets the value of $m_{p}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{p}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mquarkb ()\fC [static]\fP"

.PP
Bottom quark mass\&. Gets the value of $m_{b}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{b}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mquarkc ()\fC [static]\fP"

.PP
Charm quark mass\&. Gets the value of $m_{c}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{c}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mquarkd ()\fC [static]\fP"

.PP
Down quark mass\&. Gets the value of $m_{d}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{d}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mquarks ()\fC [static]\fP"

.PP
Strange quark mass\&. Gets the value of $m_{s}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{s}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mquarkt ()\fC [static]\fP"

.PP
Top quark mass\&. Gets the value of $m_{t}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{t}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mquarku ()\fC [static]\fP"

.PP
Up quark mass\&. Gets the value of $m_{u}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{u}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::msaturn ()\fC [static]\fP"

.PP
Saturn mass\&. Gets the value of $m_{Sa}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{Sa}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::msun ()\fC [static]\fP"

.PP
Solar mass\&. Gets the value of $m_{\odot}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{\odot}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mtau ()\fC [static]\fP"

.PP
Tau mass\&. Gets the value of $m_{\tau}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{\tau}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mu0 ()\fC [static]\fP"

.PP
Vacuum permeability\&. Gets the value of $\mu_{0}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\mu_{0}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::muranus ()\fC [static]\fP"

.PP
Uranus mass\&. Gets the value of $m_{U}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{U}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::mvenus ()\fC [static]\fP"

.PP
Venus mass\&. Gets the value of $m_{Ve}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{Ve}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::na ()\fC [static]\fP"

.PP
Avogadro number\&. Gets the value of $N_{A}$\&. 
.PP
\fBReturns:\fP
.RS 4
$N_{A}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::napier ()\fC [static]\fP"

.PP
Napier constant\&. Gets the value of $e$\&. 
.PP
\fBReturns:\fP
.RS 4
$e$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::omega ()\fC [static]\fP"

.PP
Omega constant\&. Gets the value of $\Omega$\&. 
.PP
\fBReturns:\fP
.RS 4
$\Omega$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::pc ()\fC [static]\fP"

.PP
Value of a parsec in meters\&. Gets the value of $pc$\&. 
.PP
\fBReturns:\fP
.RS 4
$pc$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::pi ()\fC [static]\fP"

.PP
Pi\&. Gets the value of $\pi$\&. 
.PP
\fBReturns:\fP
.RS 4
$\pi$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::pi2 ()\fC [static]\fP"

.PP
Squared pi\&. Gets the value of $\pi^{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\pi^{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::plancke ()\fC [static]\fP"

.PP
Planck energy\&. Gets the value of $E_{P}$\&. 
.PP
\fBReturns:\fP
.RS 4
$E_{P}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::planckf ()\fC [static]\fP"

.PP
Planck force\&. Gets the value of $F_{P}$\&. 
.PP
\fBReturns:\fP
.RS 4
$F_{P}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::planckl ()\fC [static]\fP"

.PP
Planck length\&. Gets the value of $l_{P}$\&. 
.PP
\fBReturns:\fP
.RS 4
$l_{P}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::planckm ()\fC [static]\fP"

.PP
Planck mass\&. Gets the value of $m_{P}$\&. 
.PP
\fBReturns:\fP
.RS 4
$m_{P}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::planckp ()\fC [static]\fP"

.PP
Planck power\&. Gets the value of $P_{P}$\&. 
.PP
\fBReturns:\fP
.RS 4
$P_{P}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::planckq ()\fC [static]\fP"

.PP
Planck charge\&. Gets the value of $q_{P}$\&. 
.PP
\fBReturns:\fP
.RS 4
$q_{P}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::planckt ()\fC [static]\fP"

.PP
Planck time\&. Gets the value of $t_{P}$\&. 
.PP
\fBReturns:\fP
.RS 4
$t_{P}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::plancktheta ()\fC [static]\fP"

.PP
Planck temperature\&. Gets the value of $\theta_{P}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\theta_{P}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::plastic ()\fC [static]\fP"

.PP
Plastic number\&. Gets the value of $\rho$\&. 
.PP
\fBReturns:\fP
.RS 4
$\rho$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::pythagoras ()\fC [static]\fP"

.PP
Pythagoras constant, square root of 2\&. Gets the value of $\sqrt{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\sqrt{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::quantumc ()\fC [static]\fP"

.PP
Quantum conductance\&. Gets the value of $G_{0}$\&. 
.PP
\fBReturns:\fP
.RS 4
$G_{0}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::quantumf ()\fC [static]\fP"

.PP
Quantum flux\&. Gets the value of $\phi_{0}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\phi_{0}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::radiationf ()\fC [static]\fP"

.PP
First radiation constant\&. Gets the value of $c_{1}$\&. 
.PP
\fBReturns:\fP
.RS 4
$c_{1}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::radiations ()\fC [static]\fP"

.PP
Second radiation constant\&. Gets the value of $c_{2}$\&. 
.PP
\fBReturns:\fP
.RS 4
$c_{2}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rbohr ()\fC [static]\fP"

.PP
Bohr radius\&. Gets the value of $a_{0}$\&. 
.PP
\fBReturns:\fP
.RS 4
$a_{0}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rearth ()\fC [static]\fP"

.PP
Venus radius\&. Gets the value of $r_{Ve}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{Ve}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::relectron ()\fC [static]\fP"

.PP
Classical electron radius\&. Gets the value of $r_{e}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{e}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rjupiter ()\fC [static]\fP"

.PP
Jupiter radius\&. Gets the value of $r_{J}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{J}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rmars ()\fC [static]\fP"

.PP
Mars radius\&. Gets the value of $r_{Ma}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{Ma}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rmercury ()\fC [static]\fP"

.PP
Earth radius\&. Gets the value of $r_{E}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{E}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rmoon ()\fC [static]\fP"

.PP
Moon radius\&. Gets the value of $r_{Moon}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{Moon}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rneptune ()\fC [static]\fP"

.PP
Neptune radius\&. Gets the value of $r_{N}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{N}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rsaturn ()\fC [static]\fP"

.PP
Saturn radius\&. Gets the value of $r_{Sa}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{Sa}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rsun ()\fC [static]\fP"

.PP
Solar radius\&. Gets the value of $r_{\odot}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{\odot}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::ruranus ()\fC [static]\fP"

.PP
Uranus radius\&. Gets the value of $r_{U}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{U}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rvenus ()\fC [static]\fP"

.PP
Mercury radius\&. Gets the value of $r_{Me}$\&. 
.PP
\fBReturns:\fP
.RS 4
$r_{Me}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::rydberg ()\fC [static]\fP"

.PP
Rydberg constant\&. Gets the value of $R_{\infty}$\&. 
.PP
\fBReturns:\fP
.RS 4
$R_{\infty}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::second ()\fC [static]\fP"

.PP
Duration of a second in seconds\&. Gets the value of $s$\&. 
.PP
\fBReturns:\fP
.RS 4
$s$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::soldner ()\fC [static]\fP"

.PP
Ramanujan-Soldner constant\&. Gets the value of $\mu$\&. 
.PP
\fBReturns:\fP
.RS 4
$\mu$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::sphere ()\fC [static]\fP"

.PP
Value of a sphere in steradians\&. Gets the value of $4 \pi sr$\&. 
.PP
\fBReturns:\fP
.RS 4
$4 \pi sr$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::sqrtpi ()\fC [static]\fP"

.PP
Square root of pi\&. Gets the value of $\sqrt{\pi}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\sqrt{\pi}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::stefan ()\fC [static]\fP"

.PP
Stefan constant\&. Gets the value of $\sigma$\&. 
.PP
\fBReturns:\fP
.RS 4
$\sigma$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::tanarcsec ()\fC [static]\fP"

.PP
Value of the tangent of one arcsecond\&. Gets the value of $\tan\left(arcsec\right)$\&. 
.PP
\fBReturns:\fP
.RS 4
$\tan\left(arcsec\right)$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::theodorus ()\fC [static]\fP"

.PP
Theodorus constant, square root of 3\&. Gets the value of $\sqrt{3}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\sqrt{3}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::thomson ()\fC [static]\fP"

.PP
Thomson cross section\&. Gets the value of $\sigma_{T}$\&. 
.PP
\fBReturns:\fP
.RS 4
$\sigma_{T}$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::wien ()\fC [static]\fP"

.PP
Wien constant\&. Gets the value of $b$\&. 
.PP
\fBReturns:\fP
.RS 4
$b$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::year ()\fC [static]\fP"

.PP
Duration of a SI julian year in seconds\&. Gets the value of $year$\&. 
.PP
\fBReturns:\fP
.RS 4
$year$\&. 
.RE
.PP

.SS "template<typename Type > constexpr const \fBConstant\fP< Type > \fBmagrathea::Constants\fP< Type >::z0 ()\fC [static]\fP"

.PP
Characteristic impedance of vacuum\&. Gets the value of $Z_{0}$\&. 
.PP
\fBReturns:\fP
.RS 4
$Z_{0}$\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for MAGRATHEA/PATHFINDER from the source code\&.
