.TH "magrathea::Vectorized< Type, Size >" 3 "Wed Oct 6 2021" "MAGRATHEA/PATHFINDER" \" -*- nroff -*-
.ad l
.nh
.SH NAME
magrathea::Vectorized< Type, Size > \- 
.PP
Basic vectorized container\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vectorized\&.h>\fP
.PP
Inherits \fBmagrathea::Vectorizer\fP\&.
.SS "Public Member Functions"

.PP
.RI "\fBLifecycle\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBVectorized\fP ()"
.br
.RI "\fIImplicit empty constructor\&. \fP"
.ti -1c
.RI "template<typename FundamentalType  = Type, class  = typename std::enable_if<std::is_fundamental<FundamentalType>::value>::type> \fBVectorized\fP (const \fBVectorized\fP< FundamentalType, Size > &source)"
.br
.RI "\fIImplicit conversion constructor\&. \fP"
.ti -1c
.RI "template<typename OtherType  = Type, class\&.\&.\&. Misc, class  = typename std::enable_if<std::is_convertible<OtherType, Type>::value>::type> \fBVectorized\fP (const std::initializer_list< OtherType > &source, const Misc &\&.\&.\&.misc)"
.br
.RI "\fIImplicit initializer list constructor\&. \fP"
.ti -1c
.RI "template<class\&.\&.\&. Misc, class  = typename std::enable_if<sizeof\&.\&.\&.(Misc) != 0>::type> \fBVectorized\fP (const Misc &\&.\&.\&.misc)"
.br
.RI "\fIExplicit generic constructor\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBVectorization\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "Type & \fBoperator[]\fP (const unsigned int i)"
.br
.RI "\fIDirect access to the element\&. \fP"
.ti -1c
.RI "const Type & \fBoperator[]\fP (const unsigned int i) const "
.br
.RI "\fIImmutable direct access to the element\&. \fP"
.ti -1c
.RI "\fBVectorized\fP< Type, Size > & \fBresize\fP (const unsigned int n)"
.br
.RI "\fIResize the container\&. \fP"
.ti -1c
.RI "\fBVectorized\fP< Type, Size > & \fBreserve\fP (const unsigned int n)"
.br
.in -1c
.in -1c
.SS "Static Public Member Functions"

.PP
.RI "\fBStatic vectorization\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static constexpr unsigned int \fBsize\fP ()"
.br
.RI "\fIGet the size of the container\&. \fP"
.ti -1c
.RI "static constexpr unsigned int \fBcapacity\fP ()"
.br
.ti -1c
.RI "static constexpr bool \fBconstant\fP ()"
.br
.RI "\fIGet whether the container has a constant size\&. \fP"
.ti -1c
.RI "static constexpr bool \fBboolean\fP ()"
.br
.RI "\fIGet whether the container has a boolean type\&. \fP"
.ti -1c
.RI "static constexpr std::array
.br
< unsigned int, 1 > \fBparameters\fP ()"
.br
.RI "\fIGet the template parameters\&. \fP"
.ti -1c
.RI "static Type \fBtype\fP ()"
.br
.RI "\fIGet the data type\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBTest\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static int \fBexample\fP ()"
.br
.RI "\fIExample function\&. \fP"
.in -1c
.in -1c
.SS "Protected Attributes"

.PP
.RI "\fBData members\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "Type \fB_data\fP [Size]"
.br
.RI "\fIData contents\&. \fP"
.in -1c
.in -1c
.SS "Friends"

.PP
.RI "\fBStream\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "template<typename SelfType , unsigned int SelfSize> std::ostream & \fBoperator<<\fP (std::ostream &lhs, const \fBVectorized\fP< SelfType, SelfSize > &rhs)"
.br
.RI "\fI\fBOutput\fP stream operator\&. \fP"
.in -1c
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 

.SS "template<typename Type = double, unsigned int Size = 1>exception magrathea::Vectorized< Type, Size >"
Basic vectorized container\&. 

This class is the direct derivation of \fBVectorizer\fP\&. It provides the most basic vectorized container without adding new functionalities to the abstract class\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIType\fP Data type\&. 
.br
\fISize\fP Number of elements\&. 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename Type , unsigned int Size> \fBmagrathea::Vectorized\fP< Type, Size >::\fBVectorized\fP ()\fC [inline]\fP"

.PP
Implicit empty constructor\&. Does nothing\&. 
.SS "template<typename Type , unsigned int Size> template<typename FundamentalType , class > \fBmagrathea::Vectorized\fP< Type, Size >::\fBVectorized\fP (const \fBVectorized\fP< FundamentalType, Size > &source)\fC [inline]\fP"

.PP
Implicit conversion constructor\&. Provides an implicit conversion from a fundamental type contents\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIFundamentalType\fP (Fundamental data type\&.) 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsource\fP Source of the copy\&. 
.RE
.PP

.SS "template<typename Type , unsigned int Size> template<typename OtherType , class\&.\&.\&. Misc, class > \fBmagrathea::Vectorized\fP< Type, Size >::\fBVectorized\fP (const std::initializer_list< OtherType > &source, const Misc &\&.\&.\&.misc)\fC [inline]\fP"

.PP
Implicit initializer list constructor\&. Provides an implicit conversion from an initializer list\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOtherType\fP (Other data type\&.) 
.br
\fIMisc\fP (\fBMiscellaneous\fP types\&.) 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsource\fP Source of the copy\&. 
.br
\fImisc\fP \fBMiscellaneous\fP arguments\&. 
.RE
.PP

.SS "template<typename Type , unsigned int Size> template<class\&.\&.\&. Misc, class > \fBmagrathea::Vectorized\fP< Type, Size >::\fBVectorized\fP (const Misc &\&.\&.\&.misc)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Explicit generic constructor\&. Provides a generic interface to all constructors of the base class\&. Before calling the associated constructor of the base class, the contents is initialized\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMisc\fP (\fBMiscellaneous\fP types\&.) 
.RE
.PP
\fBParameters:\fP
.RS 4
\fImisc\fP \fBMiscellaneous\fP arguments\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename Type , unsigned int Size> constexpr bool \fBmagrathea::Vectorized\fP< Type, Size >::boolean ()\fC [static]\fP"

.PP
Get whether the container has a boolean type\&. Returns true if the container has a boolean type, false otherwise\&. This function is required by the vectorization mechanism\&. 
.PP
\fBReturns:\fP
.RS 4
Copy of true if the container has a boolean type\&. 
.RE
.PP

.SS "template<typename Type = double, unsigned int Size = 1> static constexpr unsigned int \fBmagrathea::Vectorized\fP< Type, Size >::capacity ()\fC [static]\fP"

.SS "template<typename Type , unsigned int Size> constexpr bool \fBmagrathea::Vectorized\fP< Type, Size >::constant ()\fC [static]\fP"

.PP
Get whether the container has a constant size\&. Returns true if the container has a constant size, false otherwise\&. This function is required by the vectorization mechanism\&. 
.PP
\fBReturns:\fP
.RS 4
Copy of true\&. 
.RE
.PP

.SS "template<typename Type , unsigned int Size> int \fBmagrathea::Vectorized\fP< Type, Size >::example ()\fC [static]\fP"

.PP
Example function\&. Tests and demonstrates the use of \fBVectorized\fP\&. 
.PP
\fBReturns:\fP
.RS 4
0 if no error\&. 
.RE
.PP

.SS "template<typename Type , unsigned int Size> Type & \fBmagrathea::Vectorized\fP< Type, Size >::operator[] (const unsigned inti)\fC [inline]\fP"

.PP
Direct access to the element\&. Provides a direct access to the specified element\&. This function is required by the vectorization mechanism\&. 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP Index of the element\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the element\&. 
.RE
.PP

.SS "template<typename Type , unsigned int Size> const Type & \fBmagrathea::Vectorized\fP< Type, Size >::operator[] (const unsigned inti) const\fC [inline]\fP"

.PP
Immutable direct access to the element\&. Provides a constant direct access to the specified element\&. This function is required by the vectorization mechanism\&. 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP Index of the element\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Const reference to the element\&. 
.RE
.PP

.SS "template<typename Type , unsigned int Size> constexpr std::array< unsigned int, 1 > \fBmagrathea::Vectorized\fP< Type, Size >::parameters ()\fC [static]\fP"

.PP
Get the template parameters\&. Returns an array containing the template parameters\&. This function is required by the vectorization mechanism\&. 
.PP
\fBReturns:\fP
.RS 4
Copy of an array of parameters\&. 
.RE
.PP

.SS "template<typename Type = double, unsigned int Size = 1> \fBVectorized\fP<Type, Size>& \fBmagrathea::Vectorized\fP< Type, Size >::reserve (const unsigned intn)\fC [inline]\fP"

.SS "template<typename Type , unsigned int Size> \fBVectorized\fP< Type, Size > & \fBmagrathea::Vectorized\fP< Type, Size >::resize (const unsigned intn)\fC [inline]\fP"

.PP
Resize the container\&. Resizes the container and returns a reference to it\&. This function is required by the vectorization mechanism\&. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP New size\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Self reference\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP The container cannot be resized\&. 
.RE
.PP

.SS "template<typename Type , unsigned int Size> constexpr unsigned int \fBmagrathea::Vectorized\fP< Type, Size >::size ()\fC [static]\fP"

.PP
Get the size of the container\&. Returns the current number of elements\&. This function is required by the vectorization mechanism\&. 
.PP
\fBReturns:\fP
.RS 4
Copy of the size\&. 
.RE
.PP

.SS "template<typename Type , unsigned int Size> Type \fBmagrathea::Vectorized\fP< Type, Size >::type ()\fC [inline]\fP, \fC [static]\fP"

.PP
Get the data type\&. Returns a copy of the default value of the data type\&. 
.PP
\fBReturns:\fP
.RS 4
Copy of the default value of the data type\&. 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "template<typename Type = double, unsigned int Size = 1> template<typename SelfType , unsigned int SelfSize> std::ostream& operator<< (std::ostream &lhs, const \fBVectorized\fP< SelfType, SelfSize > &rhs)\fC [friend]\fP"

.PP
\fBOutput\fP stream operator\&. Adds each element to the stream using the fill character to separate the elements\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fISelfType\fP Data type\&. 
.br
\fISelfSize\fP Number of elements\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP Left-hand side stream\&. 
.br
\fIrhs\fP Right-hand side container\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBOutput\fP stream\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename Type = double, unsigned int Size = 1> Type \fBmagrathea::Vectorized\fP< Type, Size >::_data[Size]\fC [protected]\fP"

.PP
Data contents\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MAGRATHEA/PATHFINDER from the source code\&.
